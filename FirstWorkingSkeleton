#include <AFMotor.h>


//----------------PINY---------------

//const int Sensor_1_EchoPin = 5;
//const int Sensor_1_TrigPin = 6;
const int Sensor_2_EchoPin = 23;
const int Sensor_2_TrigPin = 22;
const int Sensor_3_EchoPin = 24;
const int Sensor_3_TrigPin = 25;
/*
const int Sensor_4_EchoPin = 11;
const int Sensor_4_TrigPin = 12;
const int Sensor_5_EchoPin = 13;
const int Sensor_5_TrigPin = 14;
const int Sensor_6_EchoPin = 15;
const int Sensor_6_TrigPin = 16;
*/
const int ledpin = 26;


/*  MAP TODO MAP ALL SENSORS
 *  Sensor1 - back
 *  Sensor2 - back_left
 *  Sensor3 - front_left
 */
//-----------Car_properties---------------------------

const float car_length = 20;
const float car_width = 10;
int speed = 120;

//-------------Spot properties----------

float spot_length;
float spot_width;

//---------------------------------

AF_DCMotor motor1(1); //left back motor
AF_DCMotor motor2(2); // right back motor
AF_DCMotor motor3(3); //right front motor
AF_DCMotor motor4(4); //left front motor


//--------------------------------------

char CarMode = 'C'; // C for control mode, A for parking
char bt='S';
//-------------EXTREMALY IMPORTANT-----------------
int parking_mode = 0; //TODO describe every scenario with appropriate number
/* 0 - no spot found, keep looking
 * 1 - spot found, looking for end
 * 2 - end found, started parking protocol
 * 200 - PARKED
 */

void setup()
{
    Serial.begin(9600);

    motor1.setSpeed(speed);
    motor2.setSpeed(speed);
    motor3.setSpeed(speed);
    motor4.setSpeed(speed);
    Stop();
    SensorsSetup();
}


void loop()
{

    bt=Serial.read();
    control_type();

}

//-----------------------CONTROLING-------------------------
void control_type()
{
    if(bt=='X')
    {
        CarMode='A';
    }
    if(bt=='x')
    {
        CarMode='C';
    }

    if (CarMode == 'C')
        control();
    else
        parking();
}

void control()
{
    if(bt=='F')
    {
        forward();
    }

    if(bt=='B')
    {
        backward();
    }

    if(bt=='L')
    {
        left();
    }

    if(bt=='R')
    {
        right();
    }

    if(bt=='S')
    {
        Stop();
    }

}
void forward()
{
    motor1.run(FORWARD);
    motor2.run(FORWARD);
    motor3.run(FORWARD);
    motor4.run(FORWARD);
}

void backward()
{
    motor1.run(BACKWARD);
    motor2.run(BACKWARD);
    motor3.run(BACKWARD);
    motor4.run(BACKWARD);
}
void left()
{
    motor1.run(BACKWARD);
    motor2.run(FORWARD);
    motor3.run(FORWARD);
    motor4.run(BACKWARD);
}
void right()
{
    motor1.run(FORWARD);
    motor2.run(BACKWARD);
    motor3.run(BACKWARD);
    motor4.run(FORWARD);
}
void Stop()
{
    motor1.run(RELEASE);
    motor2.run(RELEASE);
    motor3.run(RELEASE);
    motor4.run(RELEASE);
}

//------------------RIDE N -------------------;

void setSpeed(int newSpeed)
{
    motor1.setSpeed(newSpeed);
    motor2.setSpeed(newSpeed);
    motor3.setSpeed(newSpeed);
    motor4.setSpeed(newSpeed);
}
void go_forward(int newSpeed)
{
    setSpeed(newSpeed);
    forward();
    setSpeed(speed);
}

void go_back(int newSpeed)
{
    setSpeed(newSpeed);
    backward();
    setSpeed(speed);
}

void go_right(int newSpeed)
{
    setSpeed(newSpeed);
    right();
    setSpeed(speed);
}

void go_left(int newSpeed)
{
    setSpeed(newSpeed);
    left();
    setSpeed(speed);
}

//--------------------------------SENSORS-----------------------------------------------
void SensorsSetup()
{
    //   pinMode(Sensor_1_TrigPin, OUTPUT);
    //   pinMode(Sensor_1_EchoPin, INPUT);

    pinMode(Sensor_2_TrigPin, OUTPUT);
    pinMode(Sensor_2_EchoPin, INPUT);

    pinMode(Sensor_3_TrigPin, OUTPUT);
    pinMode(Sensor_3_EchoPin, INPUT);

/*
    pinMode(Sensor_4_TrigPin, OUTPUT);
    pinMode(Sensor_4_EchoPin, INPUT);

    pinMode(Sensor_5_TrigPin, OUTPUT);
    pinMode(Sensor_5_EchoPin, INPUT);

    pinMode(Sensor_6_TrigPin, OUTPUT);
    pinMode(Sensor_6_EchoPin, INPUT);

*/

}
float GetDistance(int TrigPin, int EchoPin)
{
    float distance,duration;

    digitalWrite(TrigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(TrigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(TrigPin, LOW);
    duration = pulseIn(EchoPin, HIGH);
    distance = duration * 0.034 / 2;
    return distance;
}

void parking()
{
    digitalWrite(ledpin,HIGH);
    //TODO implement parking scan
}

void scan_for_parking()
{

    float front_scan;
    float back_scan;


    //--------------for right side-------------

    front_scan = GetDistance(Sensor_2_TrigPin, Sensor_2_EchoPin);
    back_scan = GetDistance(Sensor_3_TrigPin, Sensor_3_EchoPin);

    float change = front_scan - back_scan;

    if (change > car_width && parking_mode==0) //szuka roznicy pomiedzy przednim i tylnim
    {
        spot_width = change;
        parking_mode = 1;
        //TODO start clock so we can measure spot length
    }

    if (parking_mode==1 && change < 1 && front_scan < car_width) // jak wie ze ma rownolegle to podjezdza do konca (bez liczenia dystansu narazie)
    {

        //TODO check conditions whether do park parallel or vertical
        parallel_parking();
        parking_mode = 200;
    }

    else
    {
        forward();
    }

}

void parallel_parking()
{

    //Funkcje do parkowania uzaleznione od wymiarow (formulka)

    return;

}


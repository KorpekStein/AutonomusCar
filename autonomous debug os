#include <AFMotor.h>


//----------------PINY---------------

//const int Sensor_1_EchoPin = 5;
//const int Sensor_1_TrigPin = 6;

const int Sensor_2_EchoPin = 23;
const int Sensor_2_TrigPin = 22;

const int Sensor_3_EchoPin = 24;
const int Sensor_3_TrigPin = 25;

/*
const int Sensor_4_EchoPin = 11;
const int Sensor_4_TrigPin = 12;
const int Sensor_5_EchoPin = 13;
const int Sensor_5_TrigPin = 14;
const int Sensor_6_EchoPin = 15;
const int Sensor_6_TrigPin = 16;
*/


const int ledpin = 26;


/*  MAP TODO MAP ALL SENSORS
 *  Sensor1 - back
 *  Sensor2 - back_left
 *  Sensor3 - front_left
 */
//-----------Car_properties---------------------------

const float car_length = 30;
const float car_width = 8;

int speed = 50;

//-------------Spot properties----------

float spot_length;
float spot_width;

//---------------------------------

AF_DCMotor motor1(1); //left back motor
AF_DCMotor motor2(2); // right back motor
AF_DCMotor motor3(3); //right front motor
AF_DCMotor motor4(4); //left front motor


//--------------------------------------



//-------------EXTREMALY IMPORTANT-----------------
int parking_mode = 0; //TODO describe every scenario with appropriate number
/* 0 - no spot found, keep looking
 * 1 - spot found, looking for end
 * 2 - end found, started parking protocol
 * 200 - PARKED
 */

void setup()
{
    Serial.begin(9600);

    MotorsSetup();
    SensorsSetup();
    Serial.print("Setup finished correctly\n");
}


void loop()
{
    Serial.print("Loop begin: \n");
    parking();

}

//-----------------------CONTROLING-------------------------


void forward()
{
    motor1.run(FORWARD);
    motor2.run(FORWARD);
    motor3.run(FORWARD);
    motor4.run(FORWARD);
}

void backward()
{
    motor1.run(BACKWARD);
    motor2.run(BACKWARD);
    motor3.run(BACKWARD);
    motor4.run(BACKWARD);
}
void left()
{
    motor1.run(BACKWARD);
    motor2.run(FORWARD);
    motor3.run(FORWARD);
    motor4.run(BACKWARD);
}
void right()
{
    motor1.run(FORWARD);
    motor2.run(BACKWARD);
    motor3.run(BACKWARD);
    motor4.run(FORWARD);
}
void Stop()
{
    motor1.run(RELEASE);
    motor2.run(RELEASE);
    motor3.run(RELEASE);
    motor4.run(RELEASE);
}

//------------------RIDE N -------------------;

void setSpeed(int newSpeed)
{
    motor1.setSpeed(newSpeed);
    motor2.setSpeed(newSpeed);
    motor3.setSpeed(newSpeed);
    motor4.setSpeed(newSpeed);
}


void go_forward(int newSpeed)
{
    setSpeed(newSpeed);
    forward();

}


void go_back(int newSpeed)
{
    setSpeed(newSpeed);
    backward();

}

void go_right(int newSpeed)
{
    setSpeed(newSpeed);
    right();

}

void go_left(int newSpeed)
{
    setSpeed(newSpeed);
    left();

}

//--------------------------------SENSORS-----------------------------------------------
void SensorsSetup()
{
    Serial.print("sensors Setup initiated\n");

    //   pinMode(Sensor_1_TrigPin, OUTPUT);
    //   pinMode(Sensor_1_EchoPin, INPUT);

    pinMode(Sensor_2_TrigPin, OUTPUT);
    pinMode(Sensor_2_EchoPin, INPUT);

    pinMode(Sensor_3_TrigPin, OUTPUT);
    pinMode(Sensor_3_EchoPin, INPUT);

/*
    pinMode(Sensor_4_TrigPin, OUTPUT);
    pinMode(Sensor_4_EchoPin, INPUT);

    pinMode(Sensor_5_TrigPin, OUTPUT);
    pinMode(Sensor_5_EchoPin, INPUT);

    pinMode(Sensor_6_TrigPin, OUTPUT);
    pinMode(Sensor_6_EchoPin, INPUT);

*/
    Serial.print("sensors Setup finished\n");
}
void MotorsSetup()
{
    Serial.print("Motors Setup initiated\n");
    motor1.setSpeed(speed);
    motor2.setSpeed(speed);
    motor3.setSpeed(speed);
    motor4.setSpeed(speed);
    Stop();
    Serial.print("Motors Setup finished\n");
}

float GetDistance(int TrigPin, int EchoPin)
{
    float distance,duration;

    digitalWrite(TrigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(TrigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(TrigPin, LOW);
    duration = pulseIn(EchoPin, HIGH);
    distance = duration * 0.034 / 2;

    return distance;
}


void parking()
{
    scan_for_parking();
    //TODO implement parking scan
}

void scan_for_parking()
{

    float front_side_scan;
    float back_side_scan;


    //--------------for left side-------------

    front_side_scan = GetDistance(Sensor_2_TrigPin, Sensor_2_EchoPin);
    back_side_scan = GetDistance(Sensor_3_TrigPin, Sensor_3_EchoPin);


    float change = front_side_scan - back_side_scan;

    Serial.print("Front side scan: ");
    Serial.print(front_side_scan);
    Serial.print("back side scan: ");
    Serial.print(back_side_scan);
    Serial.print("change: ");
    Serial.print(change);

    if(parking_mode == 200)
    {
        Serial.print("Parking stage finished\n");
        Stop();
        return;
    }


    if (change > car_width && parking_mode == 0) //szuka roznicy pomiedzy przednim i tylnim
    {

        Serial.print("The beggining of spot found\n");


        spot_width = change;
        Serial.print("spot width: ");
        Serial.print(spot_width);
        parking_mode = 1;
        //TODO start clock so we can measure spot length


    }

    if (parking_mode==1 && back_side_scan < car_width && front_side_scan < car_width) // jak wie ze ma rownolegle to podjezdza do konca (bez liczenia dystansu narazie)
    {
        Serial.print("The end of spot found\n");


        parking_mode = 200;
        return;

        /*
            //TODO check conditions whether do park parallel or vertical
            if(spot_width > car_length && spot_length > car_width)
            {
                vertical_parking();
            }

            if else(spot_width > car_width && spot_length > car_length)
            {
                parallel_parking();
            }

            else
            {
                parking_mode = 0;
                return;
            }

                parking_mode = 200;

        }


         */

    }
    else
    {
        Serial.print("Still looking\n");
        forward();
        delay
    }
}


void parallel_parking()
{

    //Funkcje do parkowania uzaleznione od wymiarow (formulka)
    return;

}
void vertical_parking()
{

    return;
}


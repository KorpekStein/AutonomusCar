#include <AFMotor.h>
#include <math.h>


//----------------PINY---------------


const int StepsPR = 2048; //steps needed for max turn
AF_Stepper stepper(32, 1);
int StepperStep = 0;

int parking_mode = 0;

const float car_length = 30;
const float car_width = 20;
double tire_circumference = 49.5*3.14159265359; //in cm

int speed = 90;
int ms_speed;
//---------------usefull values------------

long time_1;
long time_2;
long time_change;

long steps = 0;
int rps;
int max_turn = 520;
//-------------Spot properties----------

float spot_length;
float spot_width;

float spot_width_coeficient = 1.54;
//---------------------------------

AF_DCMotor motor1(3); //left back motor
AF_DCMotor motor2(4); // right back motor



//--------------------------------------



void setup()
{
    Serial.begin(9600);

    MotorsSetup();
}


void loop()
{
    delay(500);
    //parallel_parking(0);
    vertical_parking();
    for(;;) delay(500);
}

//-----------------------CONTROLLING-------------------------


//----------------MOTORS--------------
void MotorsSetup()
{
    motor1.setSpeed(speed);
    motor2.setSpeed(speed);
    Stop();
    stepper.setSpeed(225);

}

void forward()
{
    motor1.run(FORWARD);
    motor2.run(FORWARD);

}

void backward()
{
    motor1.run(BACKWARD);
    motor2.run(BACKWARD);

}

void left(int turn)
{
    if (StepperStep-turn >= -max_turn)
    {
        stepper.step(turn, BACKWARD, SINGLE);
        StepperStep -= turn;
    }

}

void right(int turn)
{
    if (StepperStep+turn <= max_turn)
    {
        stepper.step(turn, FORWARD, SINGLE);
        StepperStep += turn;
    }
}

void Stop()
{
    motor1.run(RELEASE);
    motor2.run(RELEASE);

}



//------------------RIDE N -------------------;


void parallel_parking(int side) // 0 is left, 1 is right
{
    //Funkcje do parkowania uzaleznione od wymiarow (formulka)

    if (side == 0)
    {
        left(512);
    }
    else
    {
        right(512);
    }

    forward();
    delay(1000); // ride n millis
    Stop();

    if (side == 1)
    {
        left(1024);
    }

    else
    {
        right(1024);
    }

    forward();
    delay(1000); // ride n millis
    Stop();


    float back_scan;
    float front_scan;


/*
    if (front_scan > back_scan)
    {
        for(;;)
        {
            forward();
            if (abs(front_scan - back_scan) < 4) break;
        }

    }
    else
    {
        for(;;)
        {
            backward();
            if (abs(front_scan - back_scan) < 4) break;
        }

    }
*/

    Stop();
    left(480);
    parking_mode = 200;
    return;

}


void vertical_parking()
{

    left(512);
    forward();
    delay(1569); // ride n millis
    Stop();
    right(512);

}
